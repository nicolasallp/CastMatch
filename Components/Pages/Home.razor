@page "/"
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime

<PageTitle>CastMatch | Connect your favorite Movies/Show cast!</PageTitle>

<div class="flex items-center justify-center flex-1 sm:flex-col sm:justify-normal mt-16">
	<Card @ref="leftCard" />
	<button class="font-ibm-mono bg-cyan-50 text-cyan-950 font-bold rounded-xl pb-6 pt-6 pr-4 pl-4 text-xl m-14 hover:bg-cyan-100 disabled:bg-cyan-800 disabled:text-cyan-700 disabled:hover:bg-cyan-800" @onclick="ListCast">
		MATCH!
	</button>
	<Card @ref="rightCard" />
</div>
<div class="flex justify-center items-center mt-10 flex-col" id="cast">
	<span class="font-ibm-mono text-[22px] font-bold text-cyan-50 mb-4">Matched cast: @Count</span>
	@foreach (Person person in MatchedCast)
	{
		<div class="flex items-center bg-cyan-800 w-[800px] mb-5 rounded-[15px]">
			<div>
				<img src="@person.ImageUrl" class="w-40 h-44 border-4 border-cyan-50 rounded-[20px] object-cover m-5" />
			</div>
			<div class="w-[600px]">
				<h3 class="font-ibm-mono text-gray-50 text-[32px] font-bold">@person.Name</h3>
				<p class="font-ibm-mono text-gray-50 text-[18px]">@person.Character[0] | @person.Character[1]</p>
			</div>
		</div>
	}
</div>


@code {
	private readonly HttpClient client = new HttpClient();
	private Card leftCard;
	private Card rightCard;
	private List<Person> MatchedCast = new List<Person>();
	private int Count = 0;
	private bool IsMatched;

	private async void ListCast()
	{
		if (leftCard.ChosenTV != null && rightCard.ChosenTV != null)
		{

			JSRuntime.InvokeVoidAsync("eval", "document.querySelector('#cast').scrollIntoView({ behavior: 'smooth' });");
			JObject json1 = await GetJson(leftCard);
			JObject json2 = await GetJson(rightCard);

			if (json1["cast"] != null && json2["cast"] != null)
			{
				foreach (JObject person in json1["cast"])
				{
					foreach (JObject person2 in json2["cast"])
					{
						//Console.WriteLine(person["id"] +"---"+ person2["id"]);
						if ((string)person["id"] == (string)person2["id"])
						{
							MatchedCast.Add(new Person
								{
									Id = (int)person["id"],
									Character = [(string)person["character"], (string)person2["character"]],
									ImageUrl = $"https://image.tmdb.org/t/p/original{(string)person["profile_path"]}",
									Name = (string)person["name"]
								});
							Count++;
						}
					}
				}
				IsMatched = true;
				StateHasChanged();
			}
		}
	}

	private async Task<JObject> GetJson(Card card)
	{
		string url = $"https://api.themoviedb.org/3/movie/{card.ChosenTV.Id}/credits?api_key={ClientTvSecret.Secret}";
		HttpResponseMessage response = await client.GetAsync(url);
		return JObject.Parse(await response.Content.ReadAsStringAsync());
	}
}