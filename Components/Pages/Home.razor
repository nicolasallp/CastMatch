@page "/"
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@inject IConfiguration config


<PageTitle>CastMatch | Connect your favorite Movies/Show cast!</PageTitle>


<fieldset class="flex justify-center mt-3">
	<div class="inline-flex">
		<input class="hidden" @onchange='(e) => SwitchMatch(e, true)' value="media" type="radio" id="tv" name="match" checked />
		<label class="bg-cyan-900 border border-cyan-50 border-opacity-50 text-cyan-50 font-semibold py-2 px-4 cursor-pointer rounded-l hover:bg-cyan-800" for="tv"><img src="@(Radio1Img+".png")" class="w-16" /></label>

		<input class="hidden" @onchange='(e) => SwitchMatch(e, false)' value="cast" type="radio" id="castRadio" name="match" />
		<label class="bg-cyan-900 border border-cyan-50 border-opacity-50 text-cyan-50 font-semibold py-2 px-4 cursor-pointer rounded-r hover:bg-cyan-800" for="castRadio"><img src="@(Radio2Img+".png")" class="w-16" /></label>
	</div>
</fieldset>

<div class="flex items-center justify-center flex-1 sm:flex-col sm:justify-normal mt-6">
	<MediaCard @ref="leftCard" IsMediaToCast="IsMediaToCast" OnChoose="CheckCards" IsLeftCard=true />
	<button class="font-ibm-mono @((Clicked) ? "bg-cyan-700 hover:bg-cyan-700"  : "bg-cyan-50 hover:bg-cyan-100") text-cyan-950 font-bold rounded-xl pb-6 pt-6 pr-4 pl-4 text-xl m-14  disabled:bg-cyan-800 disabled:text-cyan-700 disabled:hover:bg-cyan-800 min-w-[104px] min-h-[74px]" disabled="@(!IsFilled)" @onclick="ListCast">
		@if (Clicked)
		{
			<div class="inline-block h-8 w-8 animate-spin rounded-full border-4 border-solid border-current border-r-transparent align-[-0.125em] text-cyan-50 motion-reduce:animate-[spin_1.5s_linear_infinite]"
				 role="status">
				<span class="!absolute !-m-px !h-px !w-px !overflow-hidden !whitespace-nowrap !border-0 !p-0 ![clip:rect(0,0,0,0)]">Loading...</span>
			</div>
		}
		else
		{
			<p>MATCH!</p>
		}
	</button>
	<MediaCard @ref="rightCard" IsMediaToCast="IsMediaToCast" OnChoose="CheckCards" IsLeftCard=false />
</div>

<div class="flex justify-center items-center mt-4 flex-col" id="cast">
	@if (MatchedList.Count > 0 && (leftCard.IsChosen && rightCard.IsChosen))
	{
		<span class="font-ibm-mono text-[22px] font-bold text-cyan-50 mb-4 mr-2">Matches: @MatchedList.Count</span>
		@foreach (MatchInfo match in MatchedList.OrderByDescending(m => m.Popularity))
		{
			<ResultCard MatchInfo="match" ImagesUrl="[leftCard.Chosen.ImageUrl, rightCard.Chosen.ImageUrl]" />
		}
	}
	else if (NotFound)
	{
		<span class="font-ibm-mono text-[22px] font-bold text-red-600 mb-4 mr-2">No match found :(</span>
	}
</div>


@code {
	private readonly HttpClient client = new HttpClient();

	private MediaCard leftCard;
	private MediaCard rightCard;

	private List<MatchInfo> MatchedList = new List<MatchInfo>();

	public bool IsFilled;
	private bool Clicked;
	private bool NotFound;
	private bool IsMediaToCast = true;

	private ChangeEventArgs e = new ChangeEventArgs();

	// Checks if the two cards were filled.
	private void CheckCards()
	{
		IsFilled = leftCard.Chosen != null && rightCard.Chosen != null;
	}

	private async void ListCast()
	{
		Clicked = true;
		if (IsFilled)
		{
			JObject MatchLeft = await GetJson(leftCard);
			JObject MatchRight = await GetJson(rightCard);

			foreach (JObject match in MatchLeft["cast"])
			{
				foreach (JObject match2 in MatchRight["cast"])
				{
					if ((string)match["id"] == (string)match2["id"])
					{
						string[] character =
								// In the movie credits JSON, it doesn't have the "roles" attribute to get the character, unlike the TV show JSON, so I check if they have or not.
								[match["roles"] != null ?
								RemoveParentheses((string)match["roles"][0]["character"]) :
								RemoveParentheses((string)match["character"]),

									match2["roles"] != null ?
								RemoveParentheses((string)match2["roles"][0]["character"]) :
								RemoveParentheses((string)match2["character"])];

						// Filtering the shows where the "character" is himself (like talk shows, podcasts, etc...)
						string[] wordsToIgnore = (leftCard.Chosen.IsPerson) ? new string[] { leftCard.Chosen.Name.ToLower(), "self" } : new string[] { "@@@" };

						if (!wordsToIgnore.Any(word => character[0].ToLower().Contains(word)) &&
							!String.IsNullOrEmpty(character[0]) && 
							!wordsToIgnore.Any(word => character[1].ToLower().Contains(word)) &&
							!String.IsNullOrEmpty(character[1]))
						{
							if (match["vote_count"] == null || (int)match["vote_count"] > 50)
							{
								MatchedList.Add(new MatchInfo
									{
										Id = (int)match["id"],
										Character = character,
										ImageUrl = $"https://image.tmdb.org/t/p/original{(string)match[(IsMediaToCast) ? "profile_path" : "poster_path"]}",
										Name = (string)match[((string)match["media_type"] == null || (string)match["media_type"] == "tv") ? "name" : "title"],
										Popularity = (IsMediaToCast) ? 0 : (int)match["vote_count"]
									});
							}
						}
					}
				}
			}
			if (MatchedList.Count == 0)
			{
				NotFound = true;
			}

			// Filtering the repeated shows (api issue)
			HashSet<string> Repeated = new HashSet<string>();
			MatchedList = MatchedList.Where(obj => Repeated.Add(obj.Name)).ToList();

			StateHasChanged();
			await JSRuntime.InvokeVoidAsync("eval", "document.querySelector('#cast').scrollIntoView({ behavior: 'smooth' });");
		}
		Clicked = false;
		StateHasChanged();
		MatchedList.Clear();
	}

	private async Task<JObject> GetJson(MediaCard card)
	{
		string url;
		if (IsMediaToCast)
		{
			if (card.Chosen.IsMovie)
			{
				url = $"https://api.themoviedb.org/3/movie/{card.Chosen.Id}/credits?api_key={config["TVSecret"]}";
			}
			else
			{
				url = $"https://api.themoviedb.org/3/tv/{card.Chosen.Id}/aggregate_credits?api_key={config["TVSecret"]}";
			}
		}
		else
		{
			url = $"https://api.themoviedb.org/3/person/{card.Chosen.Id}/combined_credits?api_key={config["TVSecret"]}";
		}
		HttpResponseMessage response = await client.GetAsync(url);
		return JObject.Parse(await response.Content.ReadAsStringAsync());
	}

	private string? Radio1Img = "./assets/media_to_cast_checked";
	private string? Radio2Img = "./assets/cast_to_media";

	private void SwitchMatch(ChangeEventArgs e, bool isMediaToCast)
	{
		Radio1Img = Radio1Img.Replace("_checked", "");
		Radio2Img = Radio2Img.Replace("_checked", "");

		Radio1Img = (isMediaToCast) ? Radio1Img + "_checked" : Radio1Img; 
		Radio2Img = (!isMediaToCast) ? Radio2Img + "_checked" : Radio2Img;

		e.Value = null;
		leftCard.ListSearch(e);
		leftCard.IsChosen = false;
		rightCard.IsChosen = false;
		IsMediaToCast = isMediaToCast;
		NotFound = false;
	}

	private string RemoveParentheses(string text)
	{
		return Regex.Replace(text, @"\([^()]*\)", "");
	}
}