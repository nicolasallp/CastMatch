@page "/"
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@inject IConfiguration config


<PageTitle>CastMatch | Connect your favorite Movies/Show cast!</PageTitle>


<fieldset class="flex justify-center mt-3">
	<div class="inline-flex">
		<input class="hidden" @onchange="() => IsMediaToCast = true" type="radio" id="tv" name="match" value="tv" checked />
		<label class="bg-cyan-900 border border-cyan-50 border-opacity-50 text-cyan-50 font-semibold py-2 px-4 cursor-pointer rounded-l" for="tv">TV → Cast</label>

		<input class="hidden" type="radio" id="castRadio" name="match" value="cast" />
		<label class="bg-cyan-900 border border-cyan-50 border-opacity-50 text-cyan-50 font-semibold py-2 px-4 cursor-pointer rounded-r" for="castRadio">Cast → TV</label>
	</div>
	<p class="text-cyan-50">(soon...)</p>
</fieldset>

<div class="flex items-center justify-center flex-1 sm:flex-col sm:justify-normal mt-6">
	<MediaCard @ref="leftCard" IsMedia="IsMediaToCast" OnChoose="CheckCards" IsLeftCard=true />
	<button class="font-ibm-mono @((Clicked) ? "bg-cyan-700 hover:bg-cyan-700"  : "bg-cyan-50 hover:bg-cyan-100") text-cyan-950 font-bold rounded-xl pb-6 pt-6 pr-4 pl-4 text-xl m-14  disabled:bg-cyan-800 disabled:text-cyan-700 disabled:hover:bg-cyan-800 min-w-[104px] min-h-[74px]" disabled="@(!IsMediasChosen)" @onclick="ListCast">
		@if (Clicked)
		{
			<div class="inline-block h-8 w-8 animate-spin rounded-full border-4 border-solid border-current border-r-transparent align-[-0.125em] text-cyan-50 motion-reduce:animate-[spin_1.5s_linear_infinite]"
				 role="status">
				<span class="!absolute !-m-px !h-px !w-px !overflow-hidden !whitespace-nowrap !border-0 !p-0 ![clip:rect(0,0,0,0)]">Loading...</span>
			</div>
		}
		else
		{
			<p>MATCH!</p>
		}
	</button>
	<MediaCard @ref="rightCard" IsMedia="IsMediaToCast" OnChoose="CheckCards" IsLeftCard=false />
</div>

<div class="flex justify-center items-center mt-4 flex-col" id="cast">
	@if (Count > 0)
	{
		<span class="font-ibm-mono text-[22px] font-bold text-cyan-50 mb-4 mr-2">Matched cast: @Count</span>
		@foreach (Person person in MatchedCast)
		{
			<CastCard Person="person"  ImagesUrl="[leftCard.ChosenTV.ImageUrl, rightCard.ChosenTV.ImageUrl]" />
		}
	}
	else if (NotFound)
	{
		<span class="font-ibm-mono text-[22px] font-bold text-red-600 mb-4 mr-2">No match found :(</span>
	}
</div>


@code {
	private readonly HttpClient client = new HttpClient();
	private MediaCard leftCard;
	private MediaCard rightCard;
	private List<Person> MatchedCast = new List<Person>();
	private int Count = 0;
	private bool IsMediasChosen;
	private bool Clicked;
	private bool NotFound;

	// Checks if the two cards were filled.
	private void CheckCards()
	{
		IsMediasChosen = leftCard.ChosenTV != null && rightCard.ChosenTV != null;
	}

	private async void ListCast()
	{
		Clicked = true;
		if (IsMediasChosen)
		{
			JObject castLeft = await GetJson(leftCard);
			JObject castRight = await GetJson(rightCard);

			if (castLeft["cast"] != null && castRight["cast"] != null)
			{
				foreach (JObject person in castLeft["cast"])
				{
					foreach (JObject person2 in castRight["cast"])
					{
						if ((string)person["id"] == (string)person2["id"])
						{
							MatchedCast.Add(new Person
								{
									Id = (int)person["id"],
									Character = [person["roles"] != null ? 
									(string)person["roles"][0]["character"] : (string)person["character"],

									person2["roles"] != null ?
										(string)person2["roles"][0]["character"] : (string)person2["character"]],

									ImageUrl = $"https://image.tmdb.org/t/p/original{(string)person["profile_path"]}",
									Name = (string)person["name"]
								});
							Count++;
						}
					}
				}
				if (Count == 0)
				{
					NotFound = true;
				}
				StateHasChanged();
			}
			await JSRuntime.InvokeVoidAsync("eval", "document.querySelector('#cast').scrollIntoView({ behavior: 'smooth' });");
		}
		Clicked = false;
		StateHasChanged();
		MatchedCast.Clear();
		Count = 0;
	}

	private async Task<JObject> GetJson(MediaCard card)
	{
		string url;
		if (card.ChosenTV.IsMovie)
		{
			url = $"https://api.themoviedb.org/3/movie/{card.ChosenTV.Id}/credits?api_key={config["TVSecret"]}";
		}
		else
		{
			url = $"https://api.themoviedb.org/3/tv/{card.ChosenTV.Id}/aggregate_credits?api_key={config["TVSecret"]}";
		}
		HttpResponseMessage response = await client.GetAsync(url);
		return JObject.Parse(await response.Content.ReadAsStringAsync());
	}

	private bool IsMediaToCast = false;
}