@page "/"
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@inject IConfiguration config


<PageTitle>CastMatch | Connect your favorite Movies/Show cast!</PageTitle>

<div class="flex items-center justify-center flex-1 sm:flex-col sm:justify-normal mt-16">

	<Card @ref="leftCard" OnChoose="CheckCards" IsLeftCard=true />
	<button class="font-ibm-mono bg-cyan-50 text-cyan-950 font-bold rounded-xl pb-6 pt-6 pr-4 pl-4 text-xl m-14 hover:bg-cyan-100 disabled:bg-cyan-800 disabled:text-cyan-700 disabled:hover:bg-cyan-800" disabled="@(!IsTVChosen)" @onclick="ListCast">
		MATCH!
	</button>
	<Card @ref="rightCard" OnChoose="CheckCards" IsLeftCard=false />
</div>
@if (Clicked)
{
	<div class="flex justify-center items-center mt-4 flex-col" id="cast">
		@if (Matched)
		{
			<span class="font-ibm-mono text-[22px] font-bold text-cyan-50 mb-4 mr-2">Matched cast: @Count</span>
			@foreach (Person person in MatchedCast)
			{
				<div class="flex items-center bg-cyan-800 w-[800px] mb-5 rounded-[15px]">
					<div>
						<img src="@person.ImageUrl" class="w-40 h-44 border-4 border-cyan-50 rounded-[20px] object-cover m-5" />
					</div>
					<div class="w-[600px]">
						<h3 class="font-ibm-mono text-gray-50 text-[32px] font-bold">@person.Name</h3>
						<p class="font-ibm-mono text-gray-50 text-[18px]">@person.Character[0] | @person.Character[1]</p>
					</div>
				</div>
			}
		}
@* 		else
		{
			<span class="font-ibm-mono text-[22px] font-bold text-red-600 mb-4 mr-2">Match not found :(</span>
		} *@
	</div>
}


@code {
	private readonly HttpClient client = new HttpClient();
	private Card leftCard;
	private Card rightCard;
	private List<Person> MatchedCast = new List<Person>();
	private int Count = 0;
	private bool IsTVChosen = false;
	private bool Clicked = false;
	private bool Matched = false;

	private void CheckCards()
	{
		IsTVChosen = leftCard.ChosenTV != null && rightCard.ChosenTV != null;
	}

	private async void ListCast()
	{
		Clicked = true;
		//StateHasChanged();
		if (IsTVChosen)
		{
			JObject castLeft = await GetJson(leftCard);
			JObject castRight = await GetJson(rightCard);

			if (castLeft["cast"] != null && castRight["cast"] != null)
			{
				foreach (JObject person in castLeft["cast"])
				{
					foreach (JObject person2 in castRight["cast"])
					{
						if ((string)person["id"] == (string)person2["id"])
						{
							Matched = true;
							MatchedCast.Add(new Person
								{
									Id = (int)person["id"],
									Character = [person["roles"] != null ? 
									(string)person["roles"][0]["character"] : (string)person["character"],

									person2["roles"] != null ?
										(string)person2["roles"][0]["character"] : (string)person2["character"]],

									ImageUrl = $"https://image.tmdb.org/t/p/original{(string)person["profile_path"]}",
									Name = (string)person["name"]
								});
							Count++;
						}
					}
				}
				StateHasChanged();
			}
			await JSRuntime.InvokeVoidAsync("eval", "document.querySelector('#cast').scrollIntoView({ behavior: 'smooth' });");
		}
		MatchedCast.Clear();
		Count = 0;
	}

	private async Task<JObject> GetJson(Card card)
	{
		string url;
		if (card.ChosenTV.IsMovie)
		{
			url = $"https://api.themoviedb.org/3/movie/{card.ChosenTV.Id}/credits?api_key={config["TVSecret"]}";
		}
		else
		{
			url = $"https://api.themoviedb.org/3/tv/{card.ChosenTV.Id}/aggregate_credits?api_key={config["TVSecret"]}";
		}
		HttpResponseMessage response = await client.GetAsync(url);
		return JObject.Parse(await response.Content.ReadAsStringAsync());
	}
}