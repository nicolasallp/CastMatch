@page "/"
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@inject IConfiguration config


<PageTitle>CastMatch | Connect your favorite Movies/Show cast!</PageTitle>

<div class="flex items-center justify-center flex-1 sm:flex-col sm:justify-normal mt-16">
	<Card @ref="leftCard" OnChoose="CheckCards" IsLeftCard=true />
	<button class="font-ibm-mono @((Clicked) ? "bg-cyan-700 hover:bg-cyan-700"  : "bg-cyan-50 hover:bg-cyan-100") text-cyan-950 font-bold rounded-xl pb-6 pt-6 pr-4 pl-4 text-xl m-14  disabled:bg-cyan-800 disabled:text-cyan-700 disabled:hover:bg-cyan-800 min-w-[104px] min-h-[74px]" disabled="@(!IsTVChosen)" @onclick="ListCast">
		@if (Clicked)
		{
			<div class="inline-block h-8 w-8 animate-spin rounded-full border-4 border-solid border-current border-r-transparent align-[-0.125em] text-cyan-50 motion-reduce:animate-[spin_1.5s_linear_infinite]"
				 role="status">
				<span class="!absolute !-m-px !h-px !w-px !overflow-hidden !whitespace-nowrap !border-0 !p-0 ![clip:rect(0,0,0,0)]">Loading...</span>
			</div>
		}
		else
		{
			<p>MATCH!</p>
		}
	</button>
	<Card @ref="rightCard" OnChoose="CheckCards" IsLeftCard=false />
</div>

<div class="flex justify-center items-center mt-4 flex-col" id="cast">
	@if (Count > 0)
	{
		<span class="font-ibm-mono text-[22px] font-bold text-cyan-50 mb-4 mr-2">Matched cast: @Count</span>
		@foreach (Person person in MatchedCast)
		{
			<div class="flex items-center bg-cyan-800 max-w-[860px] w-[80%] mb-5 rounded-[10px]">
				<div>
					<img src="@person.ImageUrl" class="max-w-[140px] w-40 h-56 border-[3px] border-opacity-80 border-cyan-50 rounded-[10px] object-cover" />
				</div>
				<div class="w-[600px] ml-5">
					<h3 class="font-ibm-mono text-gray-50 text-[32px] sm:text-[20px] font-bold">@person.Name</h3>
					<p class="font-ibm-mono text-gray-50 text-[18px] sm:text-[12px]">@person.Character[0] | @person.Character[1]</p>
				</div>
			</div>
		}
	}
	else if (NotFound)
	{
		<span class="font-ibm-mono text-[22px] font-bold text-red-600 mb-4 mr-2">No match found :(</span>
	}
</div>


@code {
	private readonly HttpClient client = new HttpClient();
	private Card leftCard;
	private Card rightCard;
	private List<Person> MatchedCast = new List<Person>();
	private int Count = 0;
	private bool IsTVChosen = false;
	private bool Clicked = false;
	private bool NotFound = false;

	private void CheckCards()
	{
		IsTVChosen = leftCard.ChosenTV != null && rightCard.ChosenTV != null;
	}

	private async void ListCast()
	{
		Clicked = true;
		if (IsTVChosen)
		{
			JObject castLeft = await GetJson(leftCard);
			JObject castRight = await GetJson(rightCard);

			if (castLeft["cast"] != null && castRight["cast"] != null)
			{
				foreach (JObject person in castLeft["cast"])
				{
					foreach (JObject person2 in castRight["cast"])
					{
						if ((string)person["id"] == (string)person2["id"])
						{
							MatchedCast.Add(new Person
								{
									Id = (int)person["id"],
									Character = [person["roles"] != null ? 
									(string)person["roles"][0]["character"] : (string)person["character"],

									person2["roles"] != null ?
										(string)person2["roles"][0]["character"] : (string)person2["character"]],

									ImageUrl = $"https://image.tmdb.org/t/p/original{(string)person["profile_path"]}",
									Name = (string)person["name"]
								});
							Count++;
						}
					}
				}
				if (Count == 0)
				{
					NotFound = true;
				}
				StateHasChanged();
			}
			await JSRuntime.InvokeVoidAsync("eval", "document.querySelector('#cast').scrollIntoView({ behavior: 'smooth' });");
		}
		Clicked = false;
		StateHasChanged();
		MatchedCast.Clear();
		Count = 0;
	}

	private async Task<JObject> GetJson(Card card)
	{
		string url;
		if (card.ChosenTV.IsMovie)
		{
			url = $"https://api.themoviedb.org/3/movie/{card.ChosenTV.Id}/credits?api_key={config["TVSecret"]}";
		}
		else
		{
			url = $"https://api.themoviedb.org/3/tv/{card.ChosenTV.Id}/aggregate_credits?api_key={config["TVSecret"]}";
		}
		HttpResponseMessage response = await client.GetAsync(url);
		return JObject.Parse(await response.Content.ReadAsStringAsync());
	}
}