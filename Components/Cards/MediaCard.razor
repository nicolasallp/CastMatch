@inject IJSRuntime JSRuntime
@inject IConfiguration config

<style>
    ::-webkit-scrollbar {
        width: 8px;
    }

    ::-webkit-scrollbar-track {
        background-color: #103645;
    }

    ::-webkit-scrollbar-thumb {
        background-color: #8AAEBB;
        border-radius: 10px;
    }

    input:checked + label {
        background-color: #AFD7DA;
        color: #0a3749;
    }

    input:checked + label:hover {
        background-color: #AFD7DA;
    }
</style>


@if (IsLeftCard)
{
    <div class="w-10">
        @if (IsChosen)
        {
            <img src="./assets/change.png" @onclick="() => IsChosen = false" class="max-w-10 cursor-pointer hover:scale-[1.07] active:scale-100" />
        }
    </div>
}

<div class="bg-[#114052] h-[600px] w-[400px] sm:w-auto @((IsChosen) ? "" : "sm:pl-10 sm:pr-10")  sm:max-w-[400px] @((IsChosen) ? "p-[4px]" : "p-5") m-2 mb-7 rounded-[15px] flex justify-center items-center flex-col relative">
    @if (IsChosen)
    {
        <img src="@Chosen.ImageUrl" class="rounded-[15px] min-h-[100%] min-w-[100%] object-cover" />
        MatchList.Clear();
    }
    else
    {
        if (IsMediaToCast)
        {
            <img src="./assets/media.png" class="w-32 h-32 absolute top-20" />
        }
        else
        {
            <img src="./assets/person.png" class="w-32 h-32 absolute top-20" />
        }
        <label for="default-search" class="mb-1 ml-1 text-base text-gray-900 dark:text-gray-200 self-start font-ibm-mono">Search for a @((IsMediaToCast) ? "movie/tv show" : "actor/actress" )</label>
        <div class="relative w-[100%]">
            <div class="absolute inset-y-0 start-0 top-4 ps-3 pointer-events-none">
                <svg class="w-4 h-4 text-gray-500 dark:text-gray-400" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 20">
                    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m19 19-4-4m0-7A7 7 0 1 1 1 8a7 7 0 0 1 14 0Z" />
                </svg>
            </div>
            <input @oninput="ListSearch" type="text" id="default-search" class="block w-full p-3 ps-10 text-lg text-gray-900 rounded-lg bg-cyan-950 dark:bg-cyan-950 dark:placeholder-gray-400 dark:text-gray-200 outline-cyan-800 outline-0 border-0 hover:bg-[#0a3749]">
            <div class="bg-cyan-800 mt-2 rounded-lg absolute top-[100%] w-[100%] max-h-80 overflow-y-scroll shadow-zinc-800 shadow drop-shadow-xl">
                @foreach (MatchInfo match in MatchList.OrderByDescending(t => t.Popularity))
                {
                    if (match != null)
                    {
                        <div class="flex items-center border-cyan-900 border-b cursor-pointer hover:bg-cyan-700" @onclick="() => Choose(match)">
                            <div class="">
                                <img src='@match.ImageUrl' class="w-10 m-2 mr-0" />
                            </div>
                            <div class="text-gray-100 m-2 ml-3 w-80">
                                <h3 class="font-bold text-[16px]">@match.Name</h3>
                                <p class="font-light text-[14px] mt-1">@match.Year</p>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
    }
</div>

@if (!IsLeftCard)
{
    <div class="w-10">
        @if (IsChosen)
        {
            <img src="./assets/change.png" @onclick="() => IsChosen = false" class="max-w-10 cursor-pointer hover:scale-[1.07] active:scale-100" />
        }
    </div>
}

@code {
    [Parameter]
    public bool IsLeftCard { get; set; }

    [Parameter]
    public bool IsMediaToCast { get; set; }

    private string Bind = "";

    private List<MatchInfo> MatchList = new List<MatchInfo>();

    private readonly HttpClient client = new HttpClient();

    public async Task ListSearch(ChangeEventArgs e)
    {
        if (!Object.ReferenceEquals(e.Value, null))
        {
            JObject movies = await GetJson(e, "movie");
            JObject shows = await GetJson(e, "tv");
            JObject cast = await GetJson(e, "person");

            MatchList.Clear();

            if (IsMediaToCast)
            {
                InsertTvs(movies, "title", "release_date");
                InsertTvs(shows, "name", "first_air_date");
            }
            else
            {
                InsertCast(cast);
            }
        }
        else
        {
            MatchList.Clear();
        }
    }

    private void InsertCast(JObject values)
    {
        foreach (JObject person in values["results"])
        {
            if ((int)person["popularity"] > 1 && (string)person["known_for_department"] == "Acting")
            {
                MatchList.Add(new MatchInfo
                    {
                        Id = (int)person["id"],
                        Name = (string)person["name"],
                        Popularity = (int)person["popularity"],
                        ImageUrl = $"https://image.tmdb.org/t/p/original{(string)person["profile_path"]}",
                        IsPerson = true
                    });
            }
        }
        StateHasChanged();
    }

    private void InsertTvs(JObject values, string nameAtt, string yearAtt)
    {
        foreach (JObject media in values["results"])
        {
            if (media["vote_count"] != null && (int)media["vote_count"] > 50)
            {
                MatchList.Add(new MatchInfo
                    {
                        Id = (int)media["id"],
                        Name = (string)media[nameAtt],
                        Year = ((string)media[yearAtt]).Substring(0, 4),
                        Popularity = (int)media["vote_count"],
                        ImageUrl = $"https://image.tmdb.org/t/p/original{(string)media["poster_path"]}",
                        IsMovie = (media["first_air_date"] == null),
                    });
            }
        }
    }

    private async Task<JObject> GetJson(ChangeEventArgs e, string media)
    {
        List<JObject> jObjList = new List<JObject>();
        // Getting two pages of the json.
        for (int i=1;i<=2;i++)
        {
            string url = $"https://api.themoviedb.org/3/search/{media}?api_key={config["TVSecret"]}&query={e.Value.ToString()}&page={i}";
            HttpResponseMessage response = await client.GetAsync(url);
            JObject json = JObject.Parse(await response.Content.ReadAsStringAsync());
            jObjList.Add(json);
        }
        // Merging the two pages into one JObject variable.
        return jObjList.Aggregate(new JObject(), (current, jsonObj) => { current.Merge(jsonObj); return current; });
    }

    [Parameter]
    public EventCallback<bool> OnChoose { get; set; }

    public bool IsChosen = false;
    public MatchInfo Chosen;

    private async Task Choose(MatchInfo match)
    {
        IsChosen = true;
        Chosen = match;
        await OnChoose.InvokeAsync(true);
    }
}